extern "C" %{


#include "parsec.h" 
#include "parsec/data_dist/matrix/two_dim_rectangle_cyclic.h"

#define MY_TYPE parsec_datatype_double_t

%} 


Block      [type = "parsec_data_collection_t*"]
block_size [type = int]  
N          [type = int]         

Task(k)

k = 0..0

:Block(0, 0)

RW  A <- (k == 0) ? Block(0, 0) : A Task( k-1 )
      -> (k < N) ? A Task( k+1 )

      
BODY
{
    //parsec_matrix_block_cyclic_t* Adata = (parsec_matrix_block_cyclic_t *)A;
    printf(" Task %d \n", k );
  
    //for( int i = 0; i < block_size; i++)
    //    ((int*)Adata->mat)[i] += 1;
}
END


extern "C" %{ 

#define TYPE  PARSEC_MATRIX_INTEGER

int main(int argc, char *argv[])
{
    parsec_cache_taskpool_t* tp;
    parsec_context_t *parsec;
    int block_size = 10, N = 1, rc, world, rank;
    parsec_matrix_block_cyclic_t descA;
    


#if defined(PARSEC_HAVE_MPI)
    {
        int provided;
        MPI_Init_thread(&argc, &argv, MPI_THREAD_MULTIPLE, &provided);
    }
    MPI_Comm_size(MPI_COMM_WORLD, &world);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
#else
    world = 1;
    rank = 0;
#endif

    block_size = atoi(argv[1]);
    int worker_threads = atoi(argv[2]);

    printf("Block size = %d worker threads = %d world %d \n", block_size, worker_threads, world);

    parsec = parsec_init(worker_threads, &argc, &argv);

    parsec_matrix_block_cyclic_init( &descA, TYPE, PARSEC_MATRIX_TILE,
                               0,		/* rank */
                               block_size, 1, 	/* Tile size */
                               block_size, 1,   /* Global matrix size (what is stored)*/
                               0, 0,     	/* Staring point in the global matrix */
                               block_size, 1,   /* Submatrix size (the one concerned by the computation */
                               world, 1,     	/* process process grid */
                               1, 1,     	/* k-cyclicity */
                               0, 0);    	/* starting point on the process grid */

    descA.mat = parsec_data_allocate( block_size * parsec_datadist_getsizeoftype(TYPE) );
    //for( int i = 0; i < block_size; ((int*)descA.mat)[i++] = 1);
    

    tp = parsec_cache_new( (parsec_data_collection_t*) &descA, block_size, N);

    parsec_arena_datatype_construct( &tp->arenas_datatypes[PARSEC_cache_DEFAULT_ADT_IDX],
                                     block_size * parsec_datadist_getsizeoftype(TYPE),
                                     PARSEC_ARENA_ALIGNMENT_SSE,
                                     PARSEC_DATATYPE_NULL);  /* change for distributed cases */

    rc = parsec_context_add_taskpool( parsec, (parsec_taskpool_t*)tp );

    rc = parsec_context_start(parsec);
    PARSEC_CHECK_ERROR(rc, "parsec_context_start");

    rc = parsec_context_add_taskpool( parsec, (parsec_taskpool_t*)tp);
    PARSEC_CHECK_ERROR(rc, "parsec_context_add_taskpool");

    rc = parsec_context_wait(parsec);
    PARSEC_CHECK_ERROR(rc, "parsec_context_wait");

    free(descA.mat);

#ifdef PARSEC_HAVE_MPI
    MPI_Finalize();
#endif
    return 0;
}

%}
